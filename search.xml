<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go栈内存不足逃逸分析</title>
      <link href="/45094/"/>
      <url>/45094/</url>
      
        <content type="html"><![CDATA[<p>栈内存不足逃逸到堆内存，但是到底达到多大的内存时才会发生逃逸呢？</p><span id="more"></span><p>结论：<strong>当栈内单个对象大小超过64KB，则会发生内存逃逸</strong>。</p><p>栈内存不足逃逸到堆内存的场景分析如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span> <span class="comment">// 16byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stackSpace</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 动态大小，发生逃逸</span></span><br><span class="line">    length := <span class="number">10</span></span><br><span class="line">    space1 := <span class="built_in">make</span>([]<span class="type">int</span>, length)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(space1); i++ &#123;</span><br><span class="line">        space1[i] = i</span><br><span class="line">    &#125;</span><br><span class="line">    len1 := unsafe.Sizeof(space1)</span><br><span class="line">    fmt.Println(<span class="string">&quot;space1 length:&quot;</span>, len1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未发生逃逸</span></span><br><span class="line">    space2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(space2); i++ &#123;</span><br><span class="line">        space2[i] = i</span><br><span class="line">    &#125;</span><br><span class="line">    len2 := unsafe.Sizeof(space2)</span><br><span class="line">    fmt.Println(<span class="string">&quot;space2 length:&quot;</span>, len2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当int32整型数组容量大于8192*2时（64KB，单个int32大小为4字节），发生逃逸</span></span><br><span class="line">    space3 := <span class="built_in">make</span>([]<span class="type">int32</span>, <span class="number">8192</span>*<span class="number">2</span>+<span class="number">1</span>, <span class="number">8192</span>*<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(space3); i++ &#123;</span><br><span class="line">        space3[i] = <span class="type">int32</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    len3 := unsafe.Sizeof(space3)</span><br><span class="line">    fmt.Println(<span class="string">&quot;space3 length:&quot;</span>, len3)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当int64整型数组容量大于8192时（64KB，单个int64大小为8字节），发生逃逸</span></span><br><span class="line">    space4 := <span class="built_in">make</span>([]<span class="type">int64</span>, <span class="number">8193</span>, <span class="number">8193</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(space4); i++ &#123;</span><br><span class="line">        space4[i] = <span class="type">int64</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    len4 := unsafe.Sizeof(space4)</span><br><span class="line">    fmt.Println(<span class="string">&quot;space4 length:&quot;</span>, len4)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当字符串指针数组容量大于4096时（64KB，单个字符串大小为16字节），发生逃逸</span></span><br><span class="line">    space5 := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">4097</span>, <span class="number">4097</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(space5); i++ &#123;</span><br><span class="line">        s := <span class="string">&quot;a&quot;</span></span><br><span class="line">        space5[i] = s</span><br><span class="line">    &#125;</span><br><span class="line">    len5 := unsafe.Sizeof(space5)</span><br><span class="line">    fmt.Println(<span class="string">&quot;space5 length:&quot;</span>, len5)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当字符串指针数组容量大于8192时（64KB，单个指针大小为8字节），发生逃逸，变量s也发生逃逸</span></span><br><span class="line">    space6 := <span class="built_in">make</span>([]*<span class="type">string</span>, <span class="number">8193</span>, <span class="number">8193</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(space6); i++ &#123;</span><br><span class="line">        s := <span class="string">&quot;abc&quot;</span></span><br><span class="line">        space6[i] = &amp;s</span><br><span class="line">    &#125;</span><br><span class="line">    len6 := unsafe.Sizeof(space6)</span><br><span class="line">    fmt.Println(<span class="string">&quot;space6 length:&quot;</span>, len6)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当自定义对象数组容量大于4096时（64KB，单个对象大小为16字节），发生逃逸</span></span><br><span class="line">    space7 := <span class="built_in">make</span>([]student, <span class="number">4097</span>, <span class="number">4097</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(space7); i++ &#123;</span><br><span class="line">        space7[i].name = <span class="string">&quot;abc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    len7 := unsafe.Sizeof(space7)</span><br><span class="line">    fmt.Println(<span class="string">&quot;space7 length:&quot;</span>, len7)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对单个文件进行逃逸分析：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -gcflags=<span class="string">&#x27;-m -l&#x27;</span> memory_analysis.go</span><br></pre></td></tr></table></figure><p>逃逸分析结果，可以直接看make语句日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">./memory_analysis.go:67:9: moved to heap: s</span><br><span class="line">./memory_analysis.go:24:19: make([]int, length) escapes to heap</span><br><span class="line">./memory_analysis.go:29:16: ... argument does not escape</span><br><span class="line">./memory_analysis.go:29:17: <span class="string">&quot;space1 length:&quot;</span> escapes to heap</span><br><span class="line">./memory_analysis.go:29:17: len1 escapes to heap</span><br><span class="line">./memory_analysis.go:32:19: make([]int, 100, 100) does not escape</span><br><span class="line">./memory_analysis.go:37:16: ... argument does not escape</span><br><span class="line">./memory_analysis.go:37:17: <span class="string">&quot;space2 length:&quot;</span> escapes to heap</span><br><span class="line">./memory_analysis.go:37:17: len2 escapes to heap</span><br><span class="line">./memory_analysis.go:40:19: make([]int32, 8192 * 2 + 1, 8192 * 2 + 1) escapes to heap</span><br><span class="line">./memory_analysis.go:45:16: ... argument does not escape</span><br><span class="line">./memory_analysis.go:45:17: <span class="string">&quot;space3 length:&quot;</span> escapes to heap</span><br><span class="line">./memory_analysis.go:45:17: len3 escapes to heap</span><br><span class="line">./memory_analysis.go:48:19: make([]int64, 8193, 8193) escapes to heap</span><br><span class="line">./memory_analysis.go:53:16: ... argument does not escape</span><br><span class="line">./memory_analysis.go:53:17: <span class="string">&quot;space4 length:&quot;</span> escapes to heap</span><br><span class="line">./memory_analysis.go:53:17: len4 escapes to heap</span><br><span class="line">./memory_analysis.go:56:19: make([]string, 4097, 4097) escapes to heap</span><br><span class="line">./memory_analysis.go:62:16: ... argument does not escape</span><br><span class="line">./memory_analysis.go:62:17: <span class="string">&quot;space5 length:&quot;</span> escapes to heap</span><br><span class="line">./memory_analysis.go:62:17: len5 escapes to heap</span><br><span class="line">./memory_analysis.go:65:19: make([]*string, 8193, 8193) escapes to heap</span><br><span class="line">./memory_analysis.go:71:16: ... argument does not escape</span><br><span class="line">./memory_analysis.go:71:17: <span class="string">&quot;space6 length:&quot;</span> escapes to heap</span><br><span class="line">./memory_analysis.go:71:17: len6 escapes to heap</span><br><span class="line">./memory_analysis.go:74:19: make([]student, 4097, 4097) escapes to heap</span><br><span class="line">./memory_analysis.go:79:16: ... argument does not escape</span><br><span class="line">./memory_analysis.go:79:17: <span class="string">&quot;space7 length:&quot;</span> escapes to heap</span><br><span class="line">./memory_analysis.go:79:17: len7 escapes to heap</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go栈内存管理</title>
      <link href="/49218/"/>
      <url>/49218/</url>
      
        <content type="html"><![CDATA[<h1 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h1><p>栈区的内存由编译器自动进行分配和释放，栈区中存储着函数的参数以及局部变量，它们会随着函数的创建而创建，函数的返回而销毁。</p><span id="more"></span><p>每个<code>goroutine</code>都维护着一个自己的栈区，这个栈区只能自己使用不能被其他<code>goroutine</code>使用。栈区的初始大小是2KB.</p><p>栈内存空间、结构和初始大小经过了几个版本的更迭</p><ul><li>v1.0 ~ v1.1 : 最小栈内存空间为4KB；</li><li>v1.2 : 将最小栈内存提升到了8KB；</li><li>v1.3 : 使用连续栈替换之前版本的分段栈；</li><li>v1.4 ~ v1.19 : 将最小栈内存降低到了2KB；</li></ul><p>栈结构经过了分段栈到连续栈的发展过程，介绍如下。</p><h2 id="分段栈"><a href="#分段栈" class="headerlink" title="分段栈"></a>分段栈</h2><p>随着<code>goroutine</code>调用的函数层级的深入或者局部变量需要的越来越多时，运行时会调用<code>runtime.morestack</code>和<code>runtime.newstack</code> 创建一个新的栈空间，这些栈空间是不连续的，但是当前<code>goroutine</code>的多个栈空间会以双向链表的形式串联起来，运行时会通过指针找到连续的栈片段。 如下图所示。</p><p><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/%E5%9B%BE%E7%89%8711.jpg" alt="image"></p><p>优点：<br>按需为当前<code>goroutine</code>分配内存并且及时减少内存的占用。</p><p>缺点：<br>如果当前<code>goroutine</code>的栈几乎充满，那么任意的函数调用都会触发栈的扩容，当函数返回后又会触发栈的收缩，如果在一个循环中调用函数，栈的分配和释放就会造成巨大的额外开销，这被称为热分裂问题（Hot split）。</p><p>为了解决这个问题，Go在1.2版本的时候不得不将栈的初始化内存从4KB增大到了8KB。</p><h2 id="连续栈"><a href="#连续栈" class="headerlink" title="连续栈"></a>连续栈</h2><p>连续栈可以解决分段栈中存在的两个问题，其核心原理就是每当程序的栈空间不足时，初始化一片比旧栈大两倍的新栈并将原栈中的所有值都迁移到新的栈中，新的局部变量或者函数调用就有了充足的内存空间。</p><p><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/%E5%9B%BE%E7%89%8712.jpg" alt="image"></p><p>栈空间不足导致的扩容会经历以下几个步骤：</p><ol><li>调用用<code>runtime.newstack</code>在内存空间中分配更大的栈内存空间；</li><li>使用<code>runtime.copystack</code>将旧栈中的所有内容复制到新的栈中；</li><li>将指向旧栈对应变量的指针重新指向新栈；</li><li>调用<code>runtime.stackfree</code>销毁并回收旧栈的内存空间；</li></ol><h2 id="栈管理"><a href="#栈管理" class="headerlink" title="栈管理"></a>栈管理</h2><p><code>Span</code>除了用作堆内存分配外，也用于栈内存分配，只是用途不同的<code>Span</code>对应的<code>mSpan</code>状态不同。用做堆内存的<code>mSpan</code>状态为<code>mSpanInUse</code>，而用做栈内存的状态为<code>mSpanManual</code>。</p><p>栈空间在运行时中包含两个重要的全局变量，分别是<code>runtime.stackpool</code>和<code>runtime.stackLarge</code>，这两个变量分别表示全局的栈缓存和大栈缓存，前者可以分配小于 32KB 的内存，后者用来分配大于 32KB 的栈空间。</p><p>为提高栈内存分配效率，调度器初始化时会初始化两个用于栈分配的全局对象：stackpool 和stackLarge，介绍如下。</p><h3 id="StackPool"><a href="#StackPool" class="headerlink" title="StackPool"></a>StackPool</h3><p><code>stackpool</code>面向32KB以下的栈分配，栈大小必须是2的幂，最小2KB，在Linux环境下，<code>stackpool</code>提供了2kB、4KB、8KB、16KB四种规格的<code>mSpan</code>链表。</p><p><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/%E5%9B%BE%E7%89%8713.png" alt="image"></p><p><code>stackpool</code>结构定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global pool of spans that have free stacks.</span></span><br><span class="line"><span class="comment">// Stacks are assigned an order according to size.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//order = log_2(size/FixedStack)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// There is a free list for each order.</span></span><br><span class="line"><span class="keyword">var</span> stackpool [_NumStackOrders]<span class="keyword">struct</span> &#123;</span><br><span class="line">item stackpoolItem</span><br><span class="line">_    [cpu.CacheLinePadSize - unsafe.Sizeof(stackpoolItem&#123;&#125;)%cpu.CacheLinePadSize]<span class="type">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:notinheap</span></span><br><span class="line"><span class="keyword">type</span> stackpoolItem <span class="keyword">struct</span> &#123;</span><br><span class="line">mu   mutex</span><br><span class="line">span mSpanList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mSpanList heads a linked list of spans.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//go:notinheap</span></span><br><span class="line"><span class="keyword">type</span> mSpanList <span class="keyword">struct</span> &#123;</span><br><span class="line">first *mspan <span class="comment">// first span in list, or nil if none</span></span><br><span class="line">last  *mspan <span class="comment">// last span in list, or nil if none</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StackLarge"><a href="#StackLarge" class="headerlink" title="StackLarge"></a>StackLarge</h3><p>大于等于32KB的栈，由<code>stackLarge</code>来分配，这也是个<code>mSpan</code>链表的数组，长度为25。<code>mSpan</code>规格从8KB开始，之后每个链表的<code>mSpan</code>规格都是前一个的两倍。</p><p><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/%E5%9B%BE%E7%89%8714.png" alt="image"></p><p>8KB和16KB这两个链表，实际上会一直是空的，留着它们是为了方便使用<code>mSpan</code>包含页面数的（以2为底）对数作为数组下标。</p><p><code>stackLarge</code>结构定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global pool of large stack spans.</span></span><br><span class="line"><span class="keyword">var</span> stackLarge <span class="keyword">struct</span> &#123;</span><br><span class="line">lock mutex</span><br><span class="line">free [heapAddrBits - pageShift]mSpanList <span class="comment">// free lists by log_2(s.npages)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mSpanList heads a linked list of spans.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//go:notinheap</span></span><br><span class="line"><span class="keyword">type</span> mSpanList <span class="keyword">struct</span> &#123;</span><br><span class="line">first *mspan <span class="comment">// first span in list, or nil if none</span></span><br><span class="line">last  *mspan <span class="comment">// last span in list, or nil if none</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><p>如果运行时只使用全局变量来分配内存的话，势必会造成线程之间的锁竞争进而影响程序的执行效率，栈内存由于与线程关系比较密切，所以在每一个线程缓存<code>runtime.mcache</code>中都加入了栈缓存减少锁竞争影响。</p><p>同堆内存分配一样，每个P也有用于栈分配的本地缓存(<code>mcache.stackcache</code>)，这相当于是<code>stackpool</code>的本地缓存，在<code>mcache</code>中的定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:notinheap</span></span><br><span class="line"><span class="keyword">type</span> mcache <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// The following members are accessed on every malloc,</span></span><br><span class="line"><span class="comment">// so they are grouped here for better caching.</span></span><br><span class="line">nextSample <span class="type">uintptr</span> <span class="comment">// trigger heap sample after allocating this many bytes</span></span><br><span class="line">scanAlloc  <span class="type">uintptr</span> <span class="comment">// bytes of scannable heap allocated</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Allocator cache for tiny objects w/o pointers.</span></span><br><span class="line"><span class="comment">// See &quot;Tiny allocator&quot; comment in malloc.go.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tiny points to the beginning of the current tiny block, or</span></span><br><span class="line"><span class="comment">// nil if there is no current tiny block.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// tiny is a heap pointer. Since mcache is in non-GC&#x27;d memory,</span></span><br><span class="line"><span class="comment">// we handle it by clearing it in releaseAll during mark</span></span><br><span class="line"><span class="comment">// termination.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// tinyAllocs is the number of tiny allocations performed</span></span><br><span class="line"><span class="comment">// by the P that owns this mcache.</span></span><br><span class="line">tiny       <span class="type">uintptr</span></span><br><span class="line">tinyoffset <span class="type">uintptr</span></span><br><span class="line">tinyAllocs <span class="type">uintptr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The rest is not accessed on every malloc.</span></span><br><span class="line"></span><br><span class="line">alloc [numSpanClasses]*mspan <span class="comment">// spans to allocate from, indexed by spanClass</span></span><br><span class="line"></span><br><span class="line">stackcache [_NumStackOrders]stackfreelist</span><br><span class="line"></span><br><span class="line"><span class="comment">// flushGen indicates the sweepgen during which this mcache</span></span><br><span class="line"><span class="comment">// was last flushed. If flushGen != mheap_.sweepgen, the spans</span></span><br><span class="line"><span class="comment">// in this mcache are stale and need to the flushed so they</span></span><br><span class="line"><span class="comment">// can be swept. This is done in acquirep.</span></span><br><span class="line">flushGen <span class="type">uint32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stackcache [_NumStackOrders]stackfreelist</code>即为栈的本地缓存，在Linux环境下，每个P本地缓存有4（<code>_NumStackOrders</code>）种规格的空闲内存块链表：2KB，4KB，8KB，16KB，定义如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number of orders that get caching. Order 0 is FixedStack</span></span><br><span class="line"><span class="comment">// and each successive order is twice as large.</span></span><br><span class="line"><span class="comment">// We want to cache 2KB, 4KB, 8KB, and 16KB stacks. Larger stacks</span></span><br><span class="line"><span class="comment">// will be allocated directly.</span></span><br><span class="line"><span class="comment">// Since FixedStack is different on different systems, we</span></span><br><span class="line"><span class="comment">// must vary NumStackOrders to keep the same maximum cached size.</span></span><br><span class="line"><span class="comment">//   OS               | FixedStack | NumStackOrders</span></span><br><span class="line"><span class="comment">//   -----------------+------------+---------------</span></span><br><span class="line"><span class="comment">//   linux/darwin/bsd | 2KB        | 4</span></span><br><span class="line"><span class="comment">//   windows/32       | 4KB        | 3</span></span><br><span class="line"><span class="comment">//   windows/64       | 8KB        | 2</span></span><br><span class="line"><span class="comment">//   plan9            | 4KB        | 3</span></span><br><span class="line">_NumStackOrders = <span class="number">4</span> - goarch.PtrSize/<span class="number">4</span>*goos.IsWindows - <span class="number">1</span>*goos.IsPlan9</span><br></pre></td></tr></table></figure><p><strong>小于32KB的栈分配</strong>：</p><ul><li>对于小于32KB的栈空间，会优先使用当前P的本地缓存。</li><li>如果本地缓存中，对应规格的内存块链表为空，就从stackpool这里分配16KB的内存放到本地缓存（<code>stackcache</code>）中，然后继续从本地缓存分配。</li><li>若是<code>stackpool</code>中对应链表也为空，就从堆内存直接分配一个32KB的<code>span</code>划分成对应的内存块大小放到<code>stackpool</code>中。不过有些情况下，是无法使用本地缓存的，在不能使用本地缓存的情况下，就直接从<code>stackpool</code>分配。</li></ul><p><strong>大于等于32KB的栈分配：</strong></p><ul><li>计算需要的page数目，并以2为底求对数（log2page），将得到的结果作为stackLarge数组的下标，找到对应的空闲<code>mSpan</code>链表。</li><li>若链表不为空，就拿一个过来用。如果链表为空，就直接从堆内存分配一个拥有这么多个页面的span，并把它整个用于分配栈内存；</li><li>例如想要分配64KB的栈，68&#x2F;8是8个page，log2page&#x3D;log2(8)&#x3D;3</li></ul><h3 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h3><p>什么时候释放栈？</p><ul><li>如果协程栈没有增长过（还是2KB），就把这个协程放到有栈的空闲G队列中；</li><li>如果协程栈增长过，就把协程栈释放掉，再把协程放入到没有栈的空闲G队列中。而这些空闲协程的栈，也会在GC执行<code>markroot</code>时被释放掉，到时候这些协程也会加入到没有栈的空闲协程队列中。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/pic19.png" alt="image"><br>所以，常规<code>goroutine</code>栈的释放，一是发生在协程运行结束时，gfput会把增长过的栈释放掉，栈没有增长过的g会被放入<code>sched.gFree.stack</code>中；二是GC会处理<code>sched.gFree.stack</code>链表，把这里面所有g的栈都释放掉，然后把它们放入<code>sched.gFree.noStack</code>链表中。</li></ul><p>协程栈释放时是放回当前P的本地缓存？还是放回全局栈缓存？还是直接还给堆内存？</p><ul><li>其实都有可能，要视情况而定，同栈分配时一样，小于32KB和大于等于32KB的栈，在释放的时候也会区别对待。</li><li>小于32KB的栈，释放时会先放回到本地缓存中。如果本地缓存对应链表中栈空间总和大于32KB了，就把一部分放回<code>stackpool</code>中，本地这个链表只保留16KB。如果本地缓存不可用，也会直接放回<code>stackpool</code>中。而且，如果发现这个<code>mSpan</code>中所有内存块都被释放了，就会把它归还给堆内存。</li><li>对于大于等于32KB的栈释放，如果当前处在GC清理阶段（<code>gcphase==_GCoff</code>），就直接释放到堆内存，否则就先把它放回StackLarge这里。</li></ul><h3 id="栈扩容"><a href="#栈扩容" class="headerlink" title="栈扩容"></a>栈扩容</h3><p>在<code>goroutine</code>运行的时候栈区会按照需要增长和收缩，占用的内存最大限制的默认值在64位系统上是1GB。栈大小的初始值和上限这部分的设置都可以在Go的源码<code>runtime/stack.go</code>查看。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/pic20.png" alt="image"><br>扩容流程</p><ul><li>编译器会为函数调用插入运行时检查<code>runtime.morestack</code>，它会在几乎所有的函数调用之前检查当前<code>goroutine</code>的栈内存是否充足，如果当前栈需要扩容，会调用<code>runtime.newstack</code>创建新的栈 。</li><li>旧栈的大小是通过我们上面说的保存在<code>goroutine</code>中的<code>stack</code>信息里记录的栈区内存边界计算出来的，然后用旧栈两倍的大小创建新栈，创建前会检查是新栈的大小是否超过了单个栈的内存上限。</li><li>整个过程中最复杂的地方是将指向源栈中内存的指针调整为指向新的栈，这一步完成后就会释放掉旧栈的内存空间了</li></ul><h3 id="栈缩容"><a href="#栈缩容" class="headerlink" title="栈缩容"></a>栈缩容</h3><p>在<code>goroutine</code>运行的过程中，如果栈区的空间使用率不超过1&#x2F;4，那么在垃圾回收的时候使用<code>runtime.shrinkstack</code>进行栈缩容，当然进行缩容前会执行一堆前置检查，都通过了才会进行缩容。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/pic21.png" alt="image"><br>缩容流程</p><ul><li>如果要触发栈的缩容，新栈的大小会是原始栈的一半，如果新栈的大小低于程序的最低限制 2KB，那么缩容的过程就会停止。</li><li>缩容也会调用扩容时使用的<code>runtime.copystack</code>函数开辟新的栈空间，将旧栈的数据拷贝到新栈以及调整原来指针的指向。</li></ul><p>唯一发起栈收缩的地方就是 GC。GC通过<code>scanstack</code>函数寻找标记root节点时，如果发现可以安全的收缩栈，就会执行栈收缩，不能马上执行时，就设置栈收缩标识（<code>g.preemptShrink = true</code>），等到协程检测到抢占标识（<code>stackPreempt</code>）。在让出CPU之前会检查这个栈收缩标识，为true的话就会先进行栈收缩，再让出CPU。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_52690231/article/details/124476954">https://blog.csdn.net/weixin_52690231/article/details/124476954</a><br><a href="https://zhuanlan.zhihu.com/p/237870981">https://zhuanlan.zhihu.com/p/237870981</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十分钟带你入门向量检索技术</title>
      <link href="/55755/"/>
      <url>/55755/</url>
      
        <content type="html"><![CDATA[<h1 id="1-向量检索介绍"><a href="#1-向量检索介绍" class="headerlink" title="1. 向量检索介绍"></a>1. 向量检索介绍</h1><h2 id="1-1-概念介绍"><a href="#1-1-概念介绍" class="headerlink" title="1.1 概念介绍"></a>1.1 概念介绍</h2><p>随着互联网的不断发展，产生了各种各样的海量数据，比如图片、文本、视频和语音等非结构化数据，这些数据可以通过人工智能技术提取出特征向量，然后通过对这些特征向量的计算和检索来实现对非结构化数据的分析和检索，如何对非结构化的向量数据进行高效检索即为向量检索技术的核心问题。</p><span id="more"></span><h2 id="1-2-应用场景"><a href="#1-2-应用场景" class="headerlink" title="1.2. 应用场景"></a>1.2. 应用场景</h2><p>向量检索的应用场景非常丰富，比如：</p><ul><li>推荐系统：广告推荐、猜你喜欢等；</li><li>图片识别：以图搜图，通过图片检索图片。具体应用如：车辆检索和商品图片检索等；</li><li>自然语言处理：基于语义的文本检索和推荐，通过文本检索近似文本；</li><li>声纹匹配，音频检索；</li><li>文件去重：通过文件指纹去除重复文件；</li><li>新药搜索；</li></ul><p>举几个简单的例子<br>如APP的开屏广告推荐、淘宝的以图搜图、搜索引擎的联想词推荐，虽然这些场景可以用其它技术实现，但向量检索也是一个可行的方案。</p><h1 id="2-距离计算"><a href="#2-距离计算" class="headerlink" title="2. 距离计算"></a>2. 距离计算</h1><p>向量检索的过程是计算向量之间的相似度，最后返回相似度较高的TopK向量返回，而向量相似度计算有多种方式，不同的计算方式也适用于不同的检索场景。<br>对于浮点型向量和二值型向量有着不同的距离计算方式。</p><p>浮点型向量计算方式</p><ul><li>内积（IP）</li><li>欧式（L2）</li><li>余弦（Cosine）</li></ul><p>二值型向量计算方式</p><ul><li>汉明距离 (Hamming)</li><li>杰卡德距离 (Jaccard)</li><li>谷本距离 (Tanimoto)</li></ul><p>介绍距离计算之前，简单了解一下向量归一化公式，归一化后，向量模长|X’|等于1。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/71fe8j7zi3.png"></p><h2 id="2-1-内积距离"><a href="#2-1-内积距离" class="headerlink" title="2.1 内积距离"></a>2.1 内积距离</h2><p>内积距离计算的是两个向量在方向上的差异，夹角越小越相似，因此内积值越大越相似。<br>两条向量内积距离的计算公式为：<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/pm1mm8nxqn.png"></p><p>内积更适合计算向量的方向而不是大小，通常用于推荐场景。<br>内积在几何意义上是计算一条向量在另一条向量上的垂直投影长度。</p><h2 id="2-2-欧式距离"><a href="#2-2-欧式距离" class="headerlink" title="2.2 欧式距离"></a>2.2 欧式距离</h2><p>欧氏距离计算的是两点之间最短的直线距离，距离值越小越相似。<br>欧氏距离的计算公式为：<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/qovdfy9gog.png"></p><p>其中 a &#x3D; (a1, a2,…, an) 和 b &#x3D; (b1, b2,…, bn) 是 n 维欧氏空间中的两个点。<br>归一化后，欧式距离与余弦相似度呈单调关系。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/7wgimcp7yc.png"></p><p>欧氏距离是最常用的距离计算方式之一，应用广泛，适合数据完整，数据量纲统一的场景。<br>欧氏距离能够体现个体数值特征的绝对差异，所以更多的用于需要从维度的数值大小中体现差异的分析，如使用用户行为指标分析用户价值的相似度或差异。</p><h2 id="2-3-余弦距离"><a href="#2-3-余弦距离" class="headerlink" title="2.3 余弦距离"></a>2.3 余弦距离</h2><p>余弦距离计算的是两个向量之间的夹角余弦值，夹角越小越相似，因此余弦相似度值越大越相似。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/9credqerwf.png"></p><p>假设向量 A和B归一化后的向量分别是 A’和B’ ，则<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/xgx42jotys.png"></p><p>归一化后，内积与余弦相似度计算公式等价。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/hhzjowf991.png"></p><p>余弦距离和内积距离更多的是从方向上区分差异，而对绝对的数值不敏感，更多的用于使用用户对内容评分来区分兴趣的相似度和差异，同时修正了用户间可能存在的度量标准不统一的问题。</p><p>举例：统计两部剧的用户观看行为，用户A的观看向量为(0,1)，用户B为(1,0)；此时二者的余弦距很大，而欧氏距离相对较小；我们分析两个用户对于不同视频的偏好，更关注相对差异，显然应当使用余弦距离或内积距离。</p><h2 id="2-4-汉明距离"><a href="#2-4-汉明距离" class="headerlink" title="2.4 汉明距离"></a>2.4 汉明距离</h2><p>汉明距离计算二进制字符串之间的距离。两个等长字符串之间的汉明距离定义为将其中一个变为另外一个所需要作的最小替换次数。</p><p>比如，假设有两条字符串 1101 1001 和 1001 1101。比较时，如果字符相同用 0 表示，如果字符不同则用 1 表示。<br>11011001 ⊕ 10011101 &#x3D; 01000100<br>所以以上两条字符串之间的汉明距离为 2。</p><h2 id="2-5-杰卡德距离"><a href="#2-5-杰卡德距离" class="headerlink" title="2.5 杰卡德距离"></a>2.5 杰卡德距离</h2><p>杰卡德相似系数计算数据集之间的相似度，计算方式为：数据集交集的个数和并集个数的比值。计算公式可以表示为：<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/b731w8a9ew.png"></p><p>杰卡德距离是用来衡量两个数据集差异性的一种指标，被定义为 1 减去杰卡德相似系数。对于二值变量，杰卡德距离等价于谷本系数。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/75pciv2y9n.png"></p><p>杰卡德距离适合字符串相似性度量。</p><h2 id="2-6-谷本距离"><a href="#2-6-谷本距离" class="headerlink" title="2.6 谷本距离"></a>2.6 谷本距离</h2><p>对于二值变量，谷本距离公式可表示为：<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/gd6gyme79n.png"><br>值域从 0 到正无穷。<br>对于二值变量，谷本系数等价于杰卡德距离：<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/govsab33eh.png"><br>对于二值变量，谷本系数值域为 0 到 +1（+1 的相似度最高）</p><h1 id="3-基础算法"><a href="#3-基础算法" class="headerlink" title="3. 基础算法"></a>3. 基础算法</h1><p>了解了向量检索的计算相似度方式，如何加快检索速度是研究的重点。向量检索的本质是近似近邻搜索（ANNS），尽可能减小查询向量的搜索范围，从而提高查询速度，目前业界的近邻搜索算法主要分为基于树、图、量化和哈希四类。本文主要是对这四类算法思想进行简要的介绍。</p><h2 id="3-1-基于树"><a href="#3-1-基于树" class="headerlink" title="3.1 基于树"></a>3.1 基于树</h2><p>基于树的结构进行快速检索的主要思想是通过对K维空间进行多次划分，检索时只需对少数特定子空间进行检索即可，加快检索速度，其原理类似二叉树搜索。优点是简单易实现，缺点是不适合高维度向量场景。<br>基于树的搜索算法主要有KD树和Annoy算法，本文主要对KD树进行简要介绍，帮忙大家加深对K维空间划分和检索的理解。</p><ul><li>KD-树（K-Dimensional Tree）</li><li>Annoy（Approximate Nearest Neighbors Oh Yeah）</li></ul><h3 id="3-1-1-KD树"><a href="#3-1-1-KD树" class="headerlink" title="3.1.1 KD树"></a>3.1.1 KD树</h3><p>KD树是K-dimension tree的缩写，是对数据点在k维空间（如二维(x，y)，三维(x，y，z)，k维(x，y，z..）中划分的一种数据结构，就是把整个空间划分为特定的几个部分，然后在特定空间的部分内进行相关搜索操作。</p><p><strong>KD树构造算法</strong></p><ol><li>选取方差值最大的数据维度为坐标轴，以训练集中的所有数据坐标中的中位数作为切分点，将超矩形区域切割成两个子区域。将该切分点作为根结点，由根结点生出深度为1的左右子结点，左节点对应坐标小于切分点，右结点对应坐标大于切分点。</li><li>对深度为i的结点，选择为切分坐标轴，以该结点区域中训练数据坐标的中位数作为切分点，将区域分为两个子区域，且生成深度为i+1的左、右子结点，左节点对应坐标小于切分点，右结点对应坐标大于切分点。重复以上操作，直到两个子区域没有数据时停止。</li></ol><p>对于数据集{(6,5),(1,3),(-6-5),(-4-10),(-2,-1),(-5,12),(2,13),(17,-12),(8,-22),(15,-13),(10,-6),(7,15),(14,1)}</p><p>该数据集的第一个维度的方差值较大，因此选择第一个维度作为切分轴，其维度中位数为6，选择(6,5)作为切分点，如下左图。重复构造方法的步骤2，经过多次切分后得到的切分图如下右图。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/shz26y0xkd.png"> <img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/x3wj3e62gr.png"></p><p>每次切分点为树的节点，最终构造的树结构如下，右侧的X和Y分别表示基于第一个维度和第二个维度进行切分。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/dzrqbbeyg9.png"></p><p>一般而言，在空间维度(d&lt;&#x3D;30)比较低的时候，KD树是比较高效的, 针对高维数据提出了优化的KD-tree with BBF（Best Bin First）算法。</p><p><strong>KD树的检索算法</strong></p><p>假设在数据集S中搜索p节点的邻近topK节点。</p><ol><li>根据目标p的坐标和kd树的结点向下进行搜索，如果树的结点root是以数据集的维度d以来切分的，那么如果p的维度d坐标值小于root，则走左子结点，否则走右子结点。</li><li>到达叶子结点时，将其标记为已访问。如果S中不足k个点，则将该结点加入到S中；否则如果S不空且当前结点与p点的距离小于S中最长的距离，则用当前结点替换S中离p最远的点。</li><li>如果当前结点不是根节点，执行（a）；否则，结束算法。<br>（a）回退到当前结点的父结点，此时的结点为当前结点（回退之后的结点）。将当前结点标记为已访问，执行（b）和（c）；如果当前结点已经被访过，再次执行（a）。<br>（b）如果此时S中不足k个点，则将当前结点加入到S中；如果S中已有k个点，且当前结点与p点的距离小于S中最长距离，则用当前结点替换S中距离最远的点。<br>（c）计算p点和当前结点切分线的距离。如果该距离大于等于S中距离p最远的距离并且S中已有k个点，执行步骤3；如果该距离小于S中最远的距离或S中没有k个点，从当前结点的另一子节点开始执行步骤1；如果当前结点没有另一子结点，执行步骤3。</li></ol><p>假设p节点为(-1,-5)，在数据集中的位置如以下左图，检索邻近3个节点，经过上述搜索算法后，得到3个邻近节点（绿色节点），坐标为(-6,-5), (-1,-3), (-2,-1)。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/bk58oraghi.png"> <img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/56ccrdx2xq.png"></p><p>在树中遍历的节点为左子树，如下图中的蓝色线条标识节点，在根节点处结束算法。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/lq7c9abmva.png"></p><h3 id="3-1-2-Annoy"><a href="#3-1-2-Annoy" class="headerlink" title="3.1.2 Annoy"></a>3.1.2 Annoy</h3><p>Annoy（Approximate Nearest Neighbors Oh Yeah）是一种用超平面把高维空间分割成多个子空间，并把这些子空间以树型结构存储的索引方式。</p><p>在查询时，Annoy 会顺着树结构找到距离目标向量较近的一些子空间，然后比较这些子空间里的所有向量以获得最终结果。显然，当目标向量靠近某个子空间的边缘时，有时需要大大增加搜索的子空间数以获得高召回率。因此，Annoy 会使用 N 次不同的方法来划分全空间，并同时搜索所有划分方法以减少目标向量总是处于子空间边缘的概率。</p><p>Annoy 能够使用静态文件作为索引，意味着可以跨进程共享索引。它还创建了大量的基于只读文件的数据结构，这些数据结构被嵌入内存中，以便许多进程可以共享相同的数据。Annoy 的另一个好处是它试图最小化内存占用，因此索引非常小。</p><p>具体算法参考：Nearest neighbors and vector models – part 2 – algorithms and data structures</p><h2 id="3-2-基于图"><a href="#3-2-基于图" class="headerlink" title="3.2 基于图"></a>3.2 基于图</h2><p>基于图的结构进行快速检索的主要思想是通过对图中邻居节点连线（高速公路）快速缩小搜索范围，加快检索速度，其原理类似Redis跳表。优点是查询速度快，缺点是构建索引耗时长，内存占用大。<br>基于图的搜索算法主要有NSW和HNSW算法，本文主要对HNSW图进行简要介绍，帮忙大家加深对图的构造和检索的理解。</p><ul><li>NSW（Navigating Small World）</li><li>HNSW（Hierarchical Navigating Small World）</li></ul><h3 id="3-2-1-NSW"><a href="#3-2-1-NSW" class="headerlink" title="3.2.1 NSW"></a>3.2.1 NSW</h3><p><strong>朴素的图搜索算法</strong></p><p>如果要找到粉红色的点最近的点，我们从任一个点开始，比如A，从A的相邻的点中(B,C,D)找到离目标最近的点D，接下来从D相邻的点(F,J,E)中找到离目标最近的点E，而在E的相邻的点中(B,D,G,J)中，E是离目标最近，那搜索停止，E就是我们要找的点。<br>但是K点无法查询，E和L邻近点之间没有连线，邻居节点个数无法确定。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/3vcojy5n4v.png"></p><p>NSW（Navigable Small World）是一种基于图的基础搜索算法，基于朴素的图搜索算法，保证了所有的点都有相邻的点，相邻 的点有连线，邻近点的个数可以指定。</p><p><strong>NSW构图算法</strong></p><p>向图中逐个插入点，插图一个全新点时，查找到与这个全新点最近的m个点（m由用户设置），连接全新点到m个点的连线。那么越先被插入的点，越有可能有高速公路，因为插入某一个点时，链接与它相近的点。但是在后面的构图过程中可能会有更近的点插入，那么这些原先的连线就成了高速公路。</p><p><strong>NSW搜索机制</strong></p><p>在base node的近邻中找到与query最近的点，然后把这个点更新为新的base node，再重复以上过程，直到找到query。<br>NSW论文中配了如下这样一张图，黑色是近邻点的连线，红色线就是“高速公路机制”了。我们从enter point点进入查找，查找绿色点临近节点的时候，就可以用过红色连线“高速公路机制”快速查找到结果。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/hncry2mf65.png"></p><h3 id="3-2-2-HNSW"><a href="#3-2-2-HNSW" class="headerlink" title="3.2.2 HNSW"></a>3.2.2 HNSW</h3><p>HNSW（Hierarchical Navigating Small World）是一种基于图的索引算法，也是对NSW方法的改进，它由多层的邻近图组成，因此称为分层的NSW方法。它会为一张图按规则建成多层导航图，并让越上层的图越稀疏，结点间的距离越远；越下层的图越稠密，结点间的距离越近。</p><p><strong>构图算法</strong></p><p>HNSW将空间中的向量按下图的形式组织，每一个节点插入时，首先将数据保存在第0层。然后随机一个层数，从该层开始逐层往下遍历，每层都将该节点以节点内部id代表插入，并按NSW的构图规则连接M个近邻节点，直至第0层，高层到低层之间的连线即为高速公路。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/cgzdta4g6p.png"></p><p><strong>搜索算法</strong></p><p>搜索时从最上层开始，找到本层距离目标最近的结点后作为下一层的入口，进入下一层再查找。如此迭代，快速逼近目标位置。<br>0层以上，从enterpoint开始，寻找离目标最近的点。<br>0层，寻找最近的k个点。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/4rxnkxf6e2.png"></p><p>HNSW采用类似跳表的思想，在高层跳过大量离目标点较远的点，从而快速定位到离目标较近的点，从而缩小搜索范围。在构图时采用启发式搜索选择连接邻居节点，从而防止出现不连通图的情况。搜索过程中维护动态list，从而减少遗漏的情况。<br>基于图的向量检索算法在向量检索的评测中性能都是比较优异的。如果比较在乎检索算法的效率，而且可以容忍一定的空间成本，多数场景下比较推荐基于图的检索算法。而HNSW是一种典型的，应用广泛的图算法，很多分布式检索引擎都对HNSW算法进行了分布式改造，以应用于高并发，大数据量的线上查询。</p><p>但是HNSW的缺点就是，除了保存数据之外，还需要一定的内存维护图的关系，而且每个节点分配固定的内存，其中有些没有使用而造成一定的浪费。</p><p>为了提高性能，HNSW 限定了每层图上结点的最大度数 M 。M的合理范围在[2,200]。M越高，对于本身具有高维特征的数据集来讲，recall可能越高，性能越好；M越低，对于本身具有低维特征的数据集来讲，性能越好。</p><p>此外，建索引时可以指定 efConstruction，efConstruction 越大，构造时间越长，index quality越好。有时，efConstruction 增加的过快并不能提升index quality。有一种方法可以检查efConstruction 的选择是否可以接受。计算recall，当ef&#x3D;efConstruction ，在M值时，如果recall低于0.9，那么可以适当增加efConstruction 的数值。</p><p>查询时可以用 ef 来指定搜索范围，ef值越大，搜索范围越大，搜索时间也越长，一般和efConstruction值搭配调节。</p><h2 id="3-3-基于量化"><a href="#3-3-基于量化" class="headerlink" title="3.3 基于量化"></a>3.3 基于量化</h2><p>基于量化的结构进行快速检索的主要思想是将高精度的数值或向量，通过损失一定的精度，用近似的形式进行存储和计算，加快检索速度。优点是减少计算次数，加快检索速度，缺点是有一定的精度损失。<br>基于量化的方法</p><ul><li>SQ（ ScalarQuantization ）</li><li>PQ（ Product Quantization ）</li></ul><p>SQ是将每一个维度量化成指定位数的一个数，比如将32位的int量化成8位的int，通过损失一定的精度，缩减存储和计算成本，比较简单，本文主要对PQ进行简要介绍，帮忙大家加深对量化的过程和检索的理解。</p><p><strong>PQ</strong></p><p>乘积量化（PQ）算法是和VLAD算法是由法国INRIA实验室一同提出来的，为的是加快图像的检索速度。</p><p><strong>量化算法</strong></p><p>PQ先将D维空间切分成M份，现在考虑一个D&#x3D;128维的原始向量，它被切分成了M&#x3D;8个d&#x3D;16维的短向量。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/7bfim2bfi3.png"></p><p>同时每个短向量都对应一个量化的索引值，索引值即该短向量距离最近的聚类中心的编号，每一个原始向量就可以压缩成M个索引值构成的压缩向量，只要设计好了数据结构，就可以获得所有1M数据的压缩向量。压缩向量其实就是M个索引值，每个索引值对应一个聚类中心，所以要同时保存压缩向量和聚类中心，下图中的矩阵为压缩后的向量。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/lqjl0pihxd.png"></p><p><strong>搜索算法</strong></p><p>有2种方法做相似搜索，一种是SDC(symmetric distance computation)，另一种是ADC(asymmetric distance computation)。SDC算法和ADC算法的区别在于是否要对查询向量（x）做量化。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/cjz2gqdvi5.png"></p><ul><li>对称距离计算：直接使用两个压缩向量x，y的索引值所对应的码字q(x),q(y)之间的距离代替之，而q(x),q(y)之间的距离可以离线计算，因此可以把q(x),q(y)之间的距离制作成查找表，只要按照压缩向量的索引值进行对应的查找就可以了，所以速度非常快；</li><li>非对称距离计算：使用x，q(y)之间的距离代替x，y之间的距离，其中x是测试向量。虽然y的个数可能有上百万个，但是q(y)的个数只有k个，对于每个x，我们只需要在输入x之后先计算一遍x和k个q(y)的距离，制成查找表（因为只有k个，所以速度是非常快的），然后按照y对应的压缩向量索引值进行取值操作就可以了。</li></ul><p>查找过程先将查找向量x进行分段，在每个子段计算x子段到对应256个聚类中心的距离，可以使用对称距离计算或非对称距离计算，计算结果存为256*4码本。然后在每段通过查询码本计算x与每个y的距离（用到所属聚类中心的距离近似计算），然后将每段计算的对应向量的结果累加求和，最后取topK向量。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/a6n0k5wzr6.png"></p><p>通过查询码本计算向量的距离，可以大大节省向量计算时间，提高检索速度，聚类的中心越多，检索的精度也越高。<br>PQ算法可以搭配IVF算法（kmeans聚类）组成IVF_PQ算法达到更快的检索速度。</p><h2 id="3-4-基于哈希"><a href="#3-4-基于哈希" class="headerlink" title="3.4 基于哈希"></a>3.4 基于哈希</h2><p>基于哈希的结构进行快速检索的主要思想是利用相似度很高的数据以较高的概率映射成同一个hash值，相似度很低的数据以极低的概率映射成同一个hash值，将高维数据降维到低维数据，提高检索效率。优点是能高效处理海量高维数据的最近邻问题，缺点是会有一定的数据失真。<br>基于哈希的方法</p><ul><li>LSH（Locality-Sensitive Hashing）</li></ul><p><strong>LSH</strong></p><p>LSH是一将原始数据空间中的两个相邻数据点通过相同的映射或投影变换后，这两个数据点在新的数据空间中仍然相邻的概率很大，而不相邻的数据点被映射到同一个桶的概率很小。</p><p>LSH定义：将这样的一族hash函数 H&#x3D;{h:S→U} 称为是(r1,r2,p1,p2)敏感的，如果对于任意H中的函数h，满足以下2个条件：</p><ul><li>如果d(O1,O2)&lt;r1，那么Pr[h(O1)&#x3D;h(O2)]≥p1</li><li>如果d(O1,O2)&gt;r2，那么Pr[h(O1)&#x3D;h(O2)]≤p2</li></ul><p>其中，O1,O2∈S，表示两个具有多维属性的数据对象，d(O1,O2)为2个对象的相异程度，也就是相似度，当足够相似时，映射为同一hash值的概率足够大；而足够不相似时，映射为同一hash值的概率足够小。</p><p>如果我们对原始数据进行一些hash映射后，我们希望原先相邻的两个数据能够被hash到相同的桶内，具有相同的桶号。取出该桶号对应桶内的所有数据，再进行线性匹配即可查找到与查询数据相邻的数据。<br><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/2dvcveauo.png"></p><p>哈希函数是局部敏感的：相近的样本点对比相远的样本点对更容易发生碰撞。<br>LSH的设计能够通过相应的参数控制出现数据失真的概率，最关键的是构造合适的哈希函数族使得最近邻查找更为精确。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>本文主要对向量检索的概念、应用场景、距离计算方式和基础算法进行了介绍，相信你已经对向量检索技术已经有了初步了解，对于算法部分的介绍，由于篇幅问题没有进行详尽的介绍，推荐自行查询进一步消化理解。后续还将进一步分享向量检索的技术调研、测试、应用和思考。</p><h1 id="5-Reference"><a href="#5-Reference" class="headerlink" title="5. Reference"></a>5. Reference</h1><ul><li><a href="https://milvus.io/cn/docs/overview.md">https://milvus.io/cn/docs/overview.md</a></li><li><a href="https://github.com/nmslib/hnswlib">https://github.com/nmslib/hnswlib</a></li><li><a href="https://blog.csdn.net/zzpzm/article/details/88565645">https://blog.csdn.net/zzpzm/article/details/88565645</a></li><li><a href="https://zhou-yuxin.github.io/articles/2020/IVFPQ%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/index.html">https://zhou-yuxin.github.io/articles/2020/IVFPQ%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/index.html</a></li><li><a href="https://blog.csdn.net/guoziqing506/article/details/53019049">https://blog.csdn.net/guoziqing506/article/details/53019049</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 向量检索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 向量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速入门Golang Fuzz模糊测试</title>
      <link href="/64241/"/>
      <url>/64241/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在 Go 1.18 中，Go 语言新增模糊测试。</p><p>Fuzzing，又叫fuzz testing，中文叫做模糊测试或随机测试。其本质上是一种自动化测试技术，更具体一点，它是一种基于随机输入的自动化测试技术，常被用于发现处理用户输入的代码中存在的bug和问题。</p><span id="more"></span><p>在具体实现上，Fuzzing不需要像单元测试那样使用预先定义好的数据集作为程序输入，而是会通过数据构造引擎自行构造或基于开发人员提供的初始数据构造一些随机数据，并作为输入提供给我们的程序，然后监测程序是否出现panic、断言失败、无限循环等。这些构造出来的随机数据被称为语料(corpus)。另外Fuzz testing不是一次性执行的测试，如果不限制执行次数和执行时间，Fuzz testing会一直执行下去，因此它也是一种持续测试的技术。</p><p>当模糊测试时候，因为输入不可控，故不能精准预测输出。这也是模糊测试和常规的功能测试主要区别。</p><p>通过大量的变异数据输入，来验证函数功能是否完整，这就是模糊测试。</p><p>模糊测试的函数名以<code>Fuzz</code>开头，函数签名是<code>f testing.F</code>。</p><p><img src="https://image-1306104315.cos.ap-guangzhou.myqcloud.com/blog/2022062111111101.png"></p><p>支持的数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string, []byte, int, int8, int16, int32/rune, int64 uint, uint8/byte, uint16, uint32, uint64 float32, float64 bool</span><br></pre></td></tr></table></figure><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>一个test文件中只能有一个Fuzz函数。</p><p>Assert.Equal函数也是第三方包testify中的函数，此处用的是convey包中的So断言函数。</p><p><code>f.Fuzz</code>函数中func参数中从第二个参数开始可以自定义传参类型，其个数和参数类型必须和<code>f.Add</code>函数的参数个数和类型一致。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/smartystreets/goconvey/convey&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// FuzzEncodeJSON fuzzing test for `EncodeJSON`, case 1: one kind of input</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FuzzEncodeJSON</span><span class="params">(f *testing.F)</span></span> &#123;</span><br><span class="line">    testCases := []<span class="type">string</span> &#123;<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;\\U000f59fcş&quot;</span>, <span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> _, tc := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">        f.Add(tc)</span><br><span class="line">    &#125;</span><br><span class="line">    f.Fuzz(<span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, input <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">        convey.Convey(<span class="string">&quot;fuzz string&quot;</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            _, err := EncodeJSON(input)</span><br><span class="line">            convey.So(err, convey.ShouldBeNil)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FuzzEncodeJSON2 fuzzing test for `EncodeJSON`, case 2: multiple kind of input</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FuzzEncodeJSON2</span><span class="params">(f *testing.F)</span></span> &#123;</span><br><span class="line">    testCases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">        stringData <span class="type">string</span></span><br><span class="line">        intData    <span class="type">int</span></span><br><span class="line">    &#125;&#123;</span><br><span class="line">        &#123;stringData: <span class="string">&quot;\U000f59fcş&quot;</span>, intData: <span class="number">10</span>&#125;,</span><br><span class="line">        &#123;stringData: <span class="string">&quot;&quot;</span>, intData: <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;stringData: <span class="string">&quot; &quot;</span>, intData: <span class="number">100</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, tc := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">        f.Add(tc.stringData, tc.intData)</span><br><span class="line">    &#125;</span><br><span class="line">    f.Fuzz(<span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, stringData <span class="type">string</span>, intData <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        convey.Convey(<span class="string">&quot;fuzz string&quot;</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            _, err := EncodeJSON(stringData)</span><br><span class="line">            convey.So(err, convey.ShouldBeNil)</span><br><span class="line">        &#125;)</span><br><span class="line">        convey.Convey(<span class="string">&quot;fuzz int&quot;</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            _, err := EncodeJSON(intData)</span><br><span class="line">            convey.So(err, convey.ShouldBeNil)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行模糊测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go test -v -fuzz=. -fuzztime=10s</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">=== FUZZ  FuzzEncodeJSON</span><br><span class="line">fuzz: elapsed: 0s, gathering baseline coverage: 0/65 completed</span><br><span class="line">fuzz: elapsed: 0s, gathering baseline coverage: 65/65 completed, now fuzzing with 8 workers</span><br><span class="line">fuzz: elapsed: 3s, execs: 16065 (5348/sec), new interesting: 4 (total: 69)</span><br><span class="line">fuzz: elapsed: 6s, execs: 36665 (6867/sec), new interesting: 6 (total: 71)</span><br><span class="line">fuzz: elapsed: 9s, execs: 70925 (11434/sec), new interesting: 9 (total: 74)</span><br><span class="line">fuzz: elapsed: 11s, execs: 70925 (0/sec), new interesting: 9 (total: 74)</span><br><span class="line">--- PASS: FuzzEncodeJSON (11.03s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>出现错误时会在本地生成testdata目录，每个用例错误会生成一个文件，文件内容如下，下次运行的时候会读取该缓存目录下的用例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat testdata/fuzz/FuzzEncodeJSON/0768acd7f9a71cd2033c4c3d60978477f9fce228bf76e5b33710c71eeaa432ab </span><br><span class="line">go test fuzz v1</span><br><span class="line">string(&quot;\xf3\xa7\xbc\xf3\xb5\xa70&quot;)</span><br><span class="line">int(35)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
